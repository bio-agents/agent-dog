#!/usr/bin/env python3

"""
Generation of XML for Galaxy from https://bio.agents based on the Agentdog model using
galaxyxml library.
"""

#  Import  ------------------------------

# General libraries
import os
import copy
import logging

# External libraries
from lxml import etree
import galaxyxml.agent as gxt
import galaxyxml.agent.parameters as gxtp
from galaxyxml.agent.import_xml import GalaxyXmlParser

# Class and Objects
from .edam_to_galaxy import EdamToGalaxy
from agentdog import __version__

#  Constant(s)  ------------------------------

LOGGER = logging.getLogger(__name__)
PARAM_COMMENT = "This parameter has been automatically generated from" \
                " https://bio.agents/agent/%s by AgentDog v" + str(__version__) + "."
FIXME = "FIXME: Please map this parameter to its command line argument."

#  Class(es)  ------------------------------


class GalaxyAgentGen(object):
    """
    Class to support generation of XML from :class:`agentdog.bioagent_model.Bioagent` object.
    """

    def __init__(self, bioagent, galaxy_url=None, edam_url=None, mapping_json=None,
                 existing_agent=None):
        """
        Initialize a [Agent] object from galaxyxml with the minimal information
        (a name, an id, a version, a description, the command, the command version
        and a help).

        :param bioagent: Bioagent object of an entry from https://bio.agents.
        :type bioagent: :class:`agentdog.bioagent_model.Bioagent`
        """
        # Initialize GalaxyInfo
        self.etog = EdamToGalaxy(galaxy_url=galaxy_url, edam_url=edam_url,
                                 mapping_json=mapping_json)
        # Initialize counters for inputs and outputs from bio.agents
        self.input_ct = 0
        self.output_ct = 0
        self.bioagent_id = bioagent.agent_id
        if existing_agent:
            LOGGER.info("Loading existing XML from " + existing_agent)
            gxp = GalaxyXmlParser()
            self.agent = gxp.import_xml(existing_agent)
            # Add a description if missing from description
            if self.agent.root.find('description').text is None:
                self.agent.root.find('description').text = bioagent.description.split('.')[0] + '.'
            # Add information about Agentdog version
            self.agent.add_comment("This agent descriptor has been annotated by AgentDog v" +
                                  __version__)
            # Help if missing or TODO
            if self.agent.help is None:
                self.agent.help = bioagent.generate_galaxy_help()
            elif "TODO" in self.agent.help:
                LOGGER.info("TODO has been found in help, content has been replaced.")
                self.agent.help = bioagent.generate_galaxy_help()

        else:
            LOGGER.info("Creating new GalaxyAgentGen object...")
            # Initialize agent
            #   Get the first sentence of the description only
            description = bioagent.description.split('.')[0] + '.'
            self.agent = gxt.Agent(bioagent.name, bioagent.agent_id, bioagent.version,
                                 description, "COMMAND", version_command="COMMAND --version")
            self.agent.help = bioagent.generate_galaxy_help()
            #   Add information about Galaxy and EDAM in the XML
            self.agent.add_comment("Information was obtained from the Galaxy instance: " +
                                  self.etog.galaxy_url + " v" +
                                  self.etog.galaxy_version + " and EDAM v" +
                                  self.etog.edam_version)
            # Add information about Agentdog version
            self.agent.add_comment("This agent descriptor has been generated by AgentDog v" +
                                  __version__)

    def add_edam_topic(self, topic):
        """
        Add the EDAM topic to the agent (XML: <edam_topics>).

        :param topic: Topic object.
        :type topic: :class:`agentdog.bioagent_model.Topic`
        """
        LOGGER.debug("Adding EDAM topic " + topic.get_edam_id() + " to GalaxyAgentGen object.")
        if not hasattr(self.agent, 'edam_topics'):
            # First time we add topics to the agent
            self.agent.edam_topics = gxtp.EdamTopics()
        if not self.agent.edam_topics.has_topic(topic.get_edam_id()):
            self.agent.edam_topics.append(gxtp.EdamTopic(topic.get_edam_id()))

    def add_edam_operation(self, operation):
        """
        Add the EDAM operation to the agent (XML: <edam_operations>).

        :param topic: Operation object.
        :type topic: :class:`agentdog.bioagent_model.Operation`
        """
        LOGGER.debug("Adding EDAM operation " + operation.get_edam_id() +
                     " to GalaxyAgentGen object.")
        if not hasattr(self.agent, 'edam_operations'):
            # First time we add operations to the agent
            self.agent.edam_operations = gxtp.EdamOperations()
        if not self.agent.edam_operations.has_operation(operation.get_edam_id()):
            self.agent.edam_operations.append(gxtp.EdamOperation(operation.get_edam_id()))

    def add_input_file(self, input_obj):
        """
        Add an input to the agent (XML: <inputs>).

        :param input_obj: Input object.
        :type input_obj: :class:`agentdog.bioagent_model.Input`
        """
        LOGGER.debug("Adding input to GalaxyAgentGen object...")
        if not hasattr(self.agent, 'inputs'):
            self.agent.inputs = gxtp.Inputs()
        # Build parameter
        self.input_ct += 1
        data_uri = input_obj.data_type.get_edam_id()
        # Give unique name to the input
        name = 'INPUT' + str(self.input_ct)
        # Get all different format for this input
        list_formats = []
        if not input_obj.formats:
            list_formats.append(self.etog.get_datatype(edam_data=data_uri))
        else:
            for format_obj in input_obj.formats:
                format_uri = format_obj.get_edam_id()
                list_formats.append(self.etog.get_datatype(edam_data=data_uri,
                                                           edam_format=format_uri))
        formats = ', '.join(list_formats)
        # Create the parameter
        param = gxtp.DataParam(name, label=input_obj.data_type.term,
                               help=input_obj.description, format=formats)
        # Override the corresponding arguments in the command line
        param.command_line_override = '--' + name + ' $' + name
        # Write comment about this param
        param.node.insert(0, etree.Comment(FIXME))
        param.node.insert(0, etree.Comment(PARAM_COMMENT % (self.bioagent_id)))
        # Appends parameter to inputs
        self.agent.inputs.append(param)

    def add_output_file(self, output):
        """
        Add an output to the agent (XML: <outputs>).

        :param output: Output object.
        :type output: :class:`agentdog.bioagent_model.Output`
        """
        LOGGER.debug("Adding output to GalaxyAgentGen object...")
        if not hasattr(self.agent, 'outputs'):
            self.agent.outputs = gxtp.Outputs()
        # Build parameter
        self.output_ct += 1
        data_uri = output.data_type.get_edam_id()
        # Give unique name to the output
        name = 'OUTPUT' + str(self.output_ct)
        # Get all different format for this output
        list_formats = []
        if not output.formats:
            list_formats.append(self.etog.get_datatype(edam_data=data_uri))
        else:
            for format_obj in output.formats:
                format_uri = format_obj.get_edam_id()
                list_formats.append(self.etog.get_datatype(edam_data=data_uri,
                                                           edam_format=format_uri))
        formats = ', '.join(list_formats)
        # Create the parameter
        param = gxtp.OutputData(name, format=formats, from_work_dir=name +
                                "." + formats.replace('.', '/'))
        param.command_line_override = ''
        # Write comment about this param
        param.node.insert(0, etree.Comment(FIXME))
        param.node.insert(0, etree.Comment(PARAM_COMMENT % (self.bioagent_id)))
        self.agent.outputs.append(param)

    def add_citation(self, publication):
        """
        Add publication(s) to the agent (XML: <citations>).

        :param publication: Publication object.
        :type publication: :class:`agentdog.bioagent_model.Publication`
        """
        LOGGER.debug("Adding citation to GalaxyAgentGen object...")
        if not hasattr(self.agent, 'citations'):
            self.agent.citations = gxtp.Citations()
        # Add citation depending the type (doi, pmid...)
        if publication.doi is not None:
            if not self.agent.citations.has_citation('doi', publication.doi):
                self.agent.citations.append(gxtp.Citation('doi', publication.doi))
        # <citation> only supports doi and bibtex as a type
        elif publication.pmid is not None:
            # self.agent.citations.append(gxtp.Citation('pmid', publication.pmid))
            LOGGER.warn('pmid is not supported by <citation>, citation skipped')
        elif publication.pmcid is not None:
            # self.agent.citations.append(gxtp.Citation('pmcid', publication.pmcid))
            LOGGER.warn('pmcid is not supported by <citation>, citation skipped')

    def write_xml(self, out_file=None, index=None, keep_old_command=False):
        """
        Write CWL to STDOUT or out_file(s).

        :param out_file: path to output file.
        :type out_file: STRING
        :param index: Index in case more than one function is described.
        :type index: INT
        """
        # Copy informations to avoid expension of xml in case we write several XMLs
        export_agent = copy.deepcopy(self.agent)
        # Give XML on STDout
        if out_file is None:
            if index is not None:
                print('########## XML number ' + str(index) + ' ##########')
            LOGGER.info("Writing XML file to STDOUT")
            print(export_agent.export(keep_old_command).decode('utf-8'))
        else:
            # Format name for output file(s)
            if index is not None:
                out_file = os.path.splitext(out_file)[0] + str(index) + '.xml'
            else:
                out_file = os.path.splitext(out_file)[0] + '.xml'
            LOGGER.info("Writing XML file to " + out_file)
            with open(out_file, 'w') as file_w:
                file_w.write(export_agent.export(keep_old_command).decode('utf-8'))
